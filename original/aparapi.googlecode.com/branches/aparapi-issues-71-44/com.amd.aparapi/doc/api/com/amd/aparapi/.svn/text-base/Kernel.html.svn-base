<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_09) on Wed Nov 28 10:52:01 PST 2012 -->
<title>Kernel</title>
<meta name="date" content="2012-11-28">
<link rel="stylesheet" type="text/css" href="../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Kernel";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Kernel.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../com/amd/aparapi/Config.InstructionListener.html" title="interface in com.amd.aparapi"><span class="strong">Prev Class</span></a></li>
<li><a href="../../../com/amd/aparapi/Kernel.Constant.html" title="annotation in com.amd.aparapi"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?com/amd/aparapi/Kernel.html" target="_top">Frames</a></li>
<li><a href="Kernel.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested_class_summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">com.amd.aparapi</div>
<h2 title="Class Kernel" class="title">Class Kernel</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>com.amd.aparapi.Kernel</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.lang.Cloneable</dd>
</dl>
<hr>
<br>
<pre>public abstract class <span class="strong">Kernel</span>
extends java.lang.Object
implements java.lang.Cloneable</pre>
<div class="block">A <i>kernel</i> encapsulates a data parallel algorithm that will execute either on a GPU
 (through conversion to OpenCL) or on a CPU via a Java Thread Pool. 
 <p>
 To write a new kernel, a developer extends the <code>Kernel</code> class and overrides the <code>Kernel.run()</code> method.
 To execute this kernel, the developer creates a new instance of it and calls <code>Kernel.execute(int globalSize)</code> with a suitable 'global size'. At runtime
 Aparapi will attempt to convert the <code>Kernel.run()</code> method (and any method called directly or indirectly
 by <code>Kernel.run()</code>) into OpenCL for execution on GPU devices made available via the OpenCL platform. 
 <p>
 Note that <code>Kernel.run()</code> is not called directly. Instead, 
 the <code>Kernel.execute(int globalSize)</code> method will cause the overridden <code>Kernel.run()</code> 
 method to be invoked once for each value in the range <code>0...globalSize</code>.
 <p>
 On the first call to <code>Kernel.execute(int _globalSize)</code>, Aparapi will determine the EXECUTION_MODE of the kernel. 
 This decision is made dynamically based on two factors:
 <ol>
 <li>Whether OpenCL is available (appropriate drivers are installed and the OpenCL and Aparapi dynamic libraries are included on the system path).</li>
 <li>Whether the bytecode of the <code>run()</code> method (and every method that can be called directly or indirectly from the <code>run()</code> method)
  can be converted into OpenCL.</li>
 </ol>
 <p>
 Below is an example Kernel that calculates the square of a set of input values.
 <p>
 <blockquote><pre>
     class SquareKernel extends Kernel{
         private int values[];
         private int squares[];
         public SquareKernel(int values[]){
            this.values = values;
            squares = new int[values.length];
         }
         public void run() {
             int gid = getGlobalID();
             squares[gid] = values[gid]*values[gid];
         }
         public int[] getSquares(){
             return(squares);
         }
     }
 </pre></blockquote>
 <p>
 To execute this kernel, first create a new instance of it and then call <code>execute(Range _range)</code>. 
 <p>
 <blockquote><pre>
     int[] values = new int[1024];
     // fill values array
     Range range = Range.create(values.length); // create a range 0..1024
     SquareKernel kernel = new SquareKernel(values);
     kernel.execute(range);
 </pre></blockquote>
 <p>
 When <code>execute(Range)</code> returns, all the executions of <code>Kernel.run()</code> have completed and the results are available in the <code>squares</code> array.
 <p>
 <blockquote><pre>
     int[] squares = kernel.getSquares();
     for (int i=0; i< values.length; i++){
        System.out.printf("%4d %4d %8d\n", i, values[i], squares[i]);
     }
 </pre></blockquote>
 <p>
 A different approach to creating kernels that avoids extending Kernel is to write an anonymous inner class:
 <p>
 <blockquote><pre>
   
     final int[] values = new int[1024];
     // fill the values array 
     final int[] squares = new int[values.length];
     final Range range = Range.create(values.length);
   
     Kernel kernel = new Kernel(){
         public void run() {
             int gid = getGlobalID();
             squares[gid] = values[gid]*values[gid];
         }
     };
     kernel.execute(range);
     for (int i=0; i< values.length; i++){
        System.out.printf("%4d %4d %8d\n", i, values[i], squares[i]);
     }
     
 </pre></blockquote>
 <p></div>
<dl><dt><span class="strong">Version:</span></dt>
  <dd>Alpha, 21/09/2010</dd>
<dt><span class="strong">Author:</span></dt>
  <dd>gfrost AMD Javalabs</dd></dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested_class_summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Nested Class Summary table, listing nested classes, and an explanation">
<caption><span>Nested Classes</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Class and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static interface&nbsp;</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.Constant.html" title="annotation in com.amd.aparapi">Kernel.Constant</a></strong></code>
<div class="block">We can use this Annotation to 'tag' intended constant buffers.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>class&nbsp;</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.Entry.html" title="class in com.amd.aparapi">Kernel.Entry</a></strong></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static class&nbsp;</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.EXECUTION_MODE.html" title="enum in com.amd.aparapi">Kernel.EXECUTION_MODE</a></strong></code>
<div class="block">The <i>execution mode</i> ENUM enumerates the possible modes of executing a kernel.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>class&nbsp;</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.KernelState.html" title="class in com.amd.aparapi">Kernel.KernelState</a></strong></code>
<div class="block">This class is for internal Kernel state management</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static interface&nbsp;</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.Local.html" title="annotation in com.amd.aparapi">Kernel.Local</a></strong></code>
<div class="block">We can use this Annotation to 'tag' intended local buffers.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#CONSTANT_SUFFIX">CONSTANT_SUFFIX</a></strong></code>
<div class="block">We can use this suffix to 'tag' intended constant buffers.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#LOCAL_SUFFIX">LOCAL_SUFFIX</a></strong></code>
<div class="block">We can use this suffix to 'tag' intended local buffers.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#Kernel()">Kernel</a></strong>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#addExecutionModes(com.amd.aparapi.Kernel.EXECUTION_MODE...)">addExecutionModes</a></strong>(<a href="../../../com/amd/aparapi/Kernel.EXECUTION_MODE.html" title="enum in com.amd.aparapi">Kernel.EXECUTION_MODE</a>...&nbsp;platforms)</code>
<div class="block">set possible fallback path for execution modes.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#clone()">clone</a></strong>()</code>
<div class="block">When using a Java Thread Pool Aparapi uses clone to copy the initial instance to each thread.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#dispose()">dispose</a></strong>()</code>
<div class="block">Release any resources associated with this Kernel.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#execute(int)">execute</a></strong>(int&nbsp;_range)</code>
<div class="block">Start execution of <code>_range</code> kernels.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#execute(int, int)">execute</a></strong>(int&nbsp;_range,
       int&nbsp;_passes)</code>
<div class="block">Start execution of <code>_passes</code> iterations over the <code>_range</code> of kernels.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#execute(com.amd.aparapi.Kernel.Entry, com.amd.aparapi.Range)">execute</a></strong>(<a href="../../../com/amd/aparapi/Kernel.Entry.html" title="class in com.amd.aparapi">Kernel.Entry</a>&nbsp;_entry,
       <a href="../../../com/amd/aparapi/Range.html" title="class in com.amd.aparapi">Range</a>&nbsp;_range)</code>
<div class="block">Start execution of <code>globalSize</code> kernels for the given entrypoint.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#execute(com.amd.aparapi.Range)">execute</a></strong>(<a href="../../../com/amd/aparapi/Range.html" title="class in com.amd.aparapi">Range</a>&nbsp;_range)</code>
<div class="block">Start execution of <code>_range</code> kernels.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#execute(com.amd.aparapi.Range, int)">execute</a></strong>(<a href="../../../com/amd/aparapi/Range.html" title="class in com.amd.aparapi">Range</a>&nbsp;_range,
       int&nbsp;_passes)</code>
<div class="block">Start execution of <code>_passes</code> iterations of <code>_range</code> kernels.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#execute(java.lang.String, com.amd.aparapi.Range)">execute</a></strong>(java.lang.String&nbsp;_entrypoint,
       <a href="../../../com/amd/aparapi/Range.html" title="class in com.amd.aparapi">Range</a>&nbsp;_range)</code>
<div class="block">Start execution of <code>globalSize</code> kernels for the given entrypoint.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#execute(java.lang.String, com.amd.aparapi.Range, int)">execute</a></strong>(java.lang.String&nbsp;_entrypoint,
       <a href="../../../com/amd/aparapi/Range.html" title="class in com.amd.aparapi">Range</a>&nbsp;_range,
       int&nbsp;_passes)</code>
<div class="block">Start execution of <code>globalSize</code> kernels for the given entrypoint.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#get(boolean[])">get</a></strong>(boolean[]&nbsp;array)</code>
<div class="block">Enqueue a request to return this buffer from the GPU.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#get(byte[])">get</a></strong>(byte[]&nbsp;array)</code>
<div class="block">Enqueue a request to return this buffer from the GPU.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#get(char[])">get</a></strong>(char[]&nbsp;array)</code>
<div class="block">Enqueue a request to return this buffer from the GPU.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#get(double[])">get</a></strong>(double[]&nbsp;array)</code>
<div class="block">Enqueue a request to return this buffer from the GPU.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#get(float[])">get</a></strong>(float[]&nbsp;array)</code>
<div class="block">Enqueue a request to return this buffer from the GPU.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#get(int[])">get</a></strong>(int[]&nbsp;array)</code>
<div class="block">Enqueue a request to return this buffer from the GPU.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#get(long[])">get</a></strong>(long[]&nbsp;array)</code>
<div class="block">Enqueue a request to return this buffer from the GPU.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>long</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#getAccumulatedExecutionTime()">getAccumulatedExecutionTime</a></strong>()</code>
<div class="block">Determine the total execution time of all previous Kernel.execute(range) calls.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>long</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#getConversionTime()">getConversionTime</a></strong>()</code>
<div class="block">Determine the time taken to convert bytecode to OpenCL for first Kernel.execute(range) call.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.EXECUTION_MODE.html" title="enum in com.amd.aparapi">Kernel.EXECUTION_MODE</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#getExecutionMode()">getExecutionMode</a></strong>()</code>
<div class="block">Return the current execution mode.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>long</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#getExecutionTime()">getExecutionTime</a></strong>()</code>
<div class="block">Determine the execution time of the previous Kernel.execute(range) call.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.KernelState.html" title="class in com.amd.aparapi">Kernel.KernelState</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#getKernelState()">getKernelState</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#getMappedMethodName(com.amd.aparapi.internal.model.ClassModel.ConstantPool.MethodReferenceEntry)">getMappedMethodName</a></strong>(<a href="../../../com/amd/aparapi/internal/model/ClassModel.ConstantPool.MethodReferenceEntry.html" title="class in com.amd.aparapi.internal.model">ClassModel.ConstantPool.MethodReferenceEntry</a>&nbsp;_methodReferenceEntry)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/amd/aparapi/ProfileInfo.html" title="class in com.amd.aparapi">ProfileInfo</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#getProfileInfo()">getProfileInfo</a></strong>()</code>
<div class="block">Get the profiling information from the last successful call to Kernel.execute().</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#hasNextExecutionMode()">hasNextExecutionMode</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#isExplicit()">isExplicit</a></strong>()</code>
<div class="block">For dev purposes (we should remove this for production) determine whether this Kernel uses explicit memory management</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#isMappedMethod(com.amd.aparapi.internal.model.ClassModel.ConstantPool.MethodReferenceEntry)">isMappedMethod</a></strong>(<a href="../../../com/amd/aparapi/internal/model/ClassModel.ConstantPool.MethodReferenceEntry.html" title="class in com.amd.aparapi.internal.model">ClassModel.ConstantPool.MethodReferenceEntry</a>&nbsp;methodReferenceEntry)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#isOpenCLDelegateMethod(com.amd.aparapi.internal.model.ClassModel.ConstantPool.MethodReferenceEntry)">isOpenCLDelegateMethod</a></strong>(<a href="../../../com/amd/aparapi/internal/model/ClassModel.ConstantPool.MethodReferenceEntry.html" title="class in com.amd.aparapi.internal.model">ClassModel.ConstantPool.MethodReferenceEntry</a>&nbsp;methodReferenceEntry)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#put(boolean[])">put</a></strong>(boolean[]&nbsp;array)</code>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#put(byte[])">put</a></strong>(byte[]&nbsp;array)</code>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#put(char[])">put</a></strong>(char[]&nbsp;array)</code>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#put(double[])">put</a></strong>(double[]&nbsp;array)</code>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#put(float[])">put</a></strong>(float[]&nbsp;array)</code>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#put(int[])">put</a></strong>(int[]&nbsp;array)</code>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#put(long[])">put</a></strong>(long[]&nbsp;array)</code>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>abstract void</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#run()">run</a></strong>()</code>
<div class="block">The entry point of a kernel.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#setExecutionMode(com.amd.aparapi.Kernel.EXECUTION_MODE)">setExecutionMode</a></strong>(<a href="../../../com/amd/aparapi/Kernel.EXECUTION_MODE.html" title="enum in com.amd.aparapi">Kernel.EXECUTION_MODE</a>&nbsp;_executionMode)</code>
<div class="block">Set the execution mode.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#setExplicit(boolean)">setExplicit</a></strong>(boolean&nbsp;_explicit)</code>
<div class="block">For dev purposes (we should remove this for production) allow us to define that this Kernel uses explicit memory management</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#setFallbackExecutionMode()">setFallbackExecutionMode</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#tryNextExecutionMode()">tryNextExecutionMode</a></strong>()</code>
<div class="block">try the next execution path in the list if there aren't any more than give up</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#usesAtomic32(com.amd.aparapi.internal.model.ClassModel.ConstantPool.MethodReferenceEntry)">usesAtomic32</a></strong>(<a href="../../../com/amd/aparapi/internal/model/ClassModel.ConstantPool.MethodReferenceEntry.html" title="class in com.amd.aparapi.internal.model">ClassModel.ConstantPool.MethodReferenceEntry</a>&nbsp;methodReferenceEntry)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../../../com/amd/aparapi/Kernel.html#usesAtomic64(com.amd.aparapi.internal.model.ClassModel.ConstantPool.MethodReferenceEntry)">usesAtomic64</a></strong>(<a href="../../../com/amd/aparapi/internal/model/ClassModel.ConstantPool.MethodReferenceEntry.html" title="class in com.amd.aparapi.internal.model">ClassModel.ConstantPool.MethodReferenceEntry</a>&nbsp;methodReferenceEntry)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="LOCAL_SUFFIX">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>LOCAL_SUFFIX</h4>
<pre>public static final&nbsp;java.lang.String LOCAL_SUFFIX</pre>
<div class="block">We can use this suffix to 'tag' intended local buffers. 
  
  
  So either name the buffer 
  <pre><code>
  int[] buffer_$local$ = new int[1024];
  </code></pre>
  Or use the Annotation form 
  <pre><code>
  &#64Local int[] buffer = new int[1024];
  </code></pre></div>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../constant-values.html#com.amd.aparapi.Kernel.LOCAL_SUFFIX">Constant Field Values</a></dd></dl>
</li>
</ul>
<a name="CONSTANT_SUFFIX">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>CONSTANT_SUFFIX</h4>
<pre>public static final&nbsp;java.lang.String CONSTANT_SUFFIX</pre>
<div class="block">We can use this suffix to 'tag' intended constant buffers. 
  
  
  So either name the buffer 
  <pre><code>
  int[] buffer_$constant$ = new int[1024];
  </code></pre>
  Or use the Annotation form 
  <pre><code>
  &#64Constant int[] buffer = new int[1024];
  </code></pre></div>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../constant-values.html#com.amd.aparapi.Kernel.CONSTANT_SUFFIX">Constant Field Values</a></dd></dl>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Kernel()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Kernel</h4>
<pre>public&nbsp;Kernel()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="run()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>run</h4>
<pre>public abstract&nbsp;void&nbsp;run()</pre>
<div class="block">The entry point of a kernel. 
  
 <p>
 Every kernel must override this method.</div>
</li>
</ul>
<a name="clone()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clone</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;clone()</pre>
<div class="block">When using a Java Thread Pool Aparapi uses clone to copy the initial instance to each thread. 
  
 <p>
 If you choose to override <code>clone()</code> you are responsible for delegating to <code>super.clone();</code></div>
<dl>
<dt><strong>Overrides:</strong></dt>
<dd><code>clone</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
</dl>
</li>
</ul>
<a name="getKernelState()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getKernelState</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.KernelState.html" title="class in com.amd.aparapi">Kernel.KernelState</a>&nbsp;getKernelState()</pre>
</li>
</ul>
<a name="getExecutionTime()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getExecutionTime</h4>
<pre>public&nbsp;long&nbsp;getExecutionTime()</pre>
<div class="block">Determine the execution time of the previous Kernel.execute(range) call.
 
 Note that for the first call this will include the conversion time.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>The time spent executing the kernel (ms)</dd><dt><span class="strong">See Also:</span></dt><dd><a href="../../../com/amd/aparapi/Kernel.html#getConversionTime()"><code>getConversionTime();</code></a>, 
<code>getAccumulatedExectutionTime();</code></dd></dl>
</li>
</ul>
<a name="getAccumulatedExecutionTime()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getAccumulatedExecutionTime</h4>
<pre>public&nbsp;long&nbsp;getAccumulatedExecutionTime()</pre>
<div class="block">Determine the total execution time of all previous Kernel.execute(range) calls.
 
 Note that this will include the initial conversion time.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>The total time spent executing the kernel (ms)</dd><dt><span class="strong">See Also:</span></dt><dd><a href="../../../com/amd/aparapi/Kernel.html#getExecutionTime()"><code>getExecutionTime();</code></a>, 
<a href="../../../com/amd/aparapi/Kernel.html#getConversionTime()"><code>getConversionTime();</code></a></dd></dl>
</li>
</ul>
<a name="getConversionTime()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getConversionTime</h4>
<pre>public&nbsp;long&nbsp;getConversionTime()</pre>
<div class="block">Determine the time taken to convert bytecode to OpenCL for first Kernel.execute(range) call.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>The time spent preparing the kernel for execution using GPU</dd><dt><span class="strong">See Also:</span></dt><dd><a href="../../../com/amd/aparapi/Kernel.html#getExecutionTime()"><code>getExecutionTime();</code></a>, 
<code>getAccumulatedExectutionTime();</code></dd></dl>
</li>
</ul>
<a name="execute(com.amd.aparapi.Range)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>execute</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;execute(<a href="../../../com/amd/aparapi/Range.html" title="class in com.amd.aparapi">Range</a>&nbsp;_range)</pre>
<div class="block">Start execution of <code>_range</code> kernels.
 <p>
 When <code>kernel.execute(globalSize)</code> is invoked, Aparapi will schedule the execution of <code>globalSize</code> kernels. If the execution mode is GPU then 
 the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. 
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>range</code> - The number of Kernels that we would like to initiate.</dd></dl>
</li>
</ul>
<a name="execute(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>execute</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;execute(int&nbsp;_range)</pre>
<div class="block">Start execution of <code>_range</code> kernels.
 <p>
 When <code>kernel.execute(_range)</code> is invoked, Aparapi will schedule the execution of <code>_range</code> kernels. If the execution mode is GPU then 
 the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. 
 <p>
 Since adding the new <code>Range class</code> this method offers backward compatibility and merely defers to <code> return (execute(Range.create(_range), 1));</code>.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_range</code> - The number of Kernels that we would like to initiate.</dd></dl>
</li>
</ul>
<a name="execute(com.amd.aparapi.Range, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>execute</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;execute(<a href="../../../com/amd/aparapi/Range.html" title="class in com.amd.aparapi">Range</a>&nbsp;_range,
             int&nbsp;_passes)</pre>
<div class="block">Start execution of <code>_passes</code> iterations of <code>_range</code> kernels.
 <p>
 When <code>kernel.execute(_range, _passes)</code> is invoked, Aparapi will schedule the execution of <code>_reange</code> kernels. If the execution mode is GPU then 
 the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. 
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_globalSize</code> - The number of Kernels that we would like to initiate.</dd><dd><code>_passes</code> - The number of passes to make</dd>
<dt><span class="strong">Returns:</span></dt><dd>The Kernel instance (this) so we can chain calls to put(arr).execute(range).get(arr)</dd></dl>
</li>
</ul>
<a name="execute(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>execute</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;execute(int&nbsp;_range,
             int&nbsp;_passes)</pre>
<div class="block">Start execution of <code>_passes</code> iterations over the <code>_range</code> of kernels.
 <p>
 When <code>kernel.execute(_range)</code> is invoked, Aparapi will schedule the execution of <code>_range</code> kernels. If the execution mode is GPU then 
 the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. 
 <p>
 Since adding the new <code>Range class</code> this method offers backward compatibility and merely defers to <code> return (execute(Range.create(_range), 1));</code>.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_range</code> - The number of Kernels that we would like to initiate.</dd></dl>
</li>
</ul>
<a name="execute(com.amd.aparapi.Kernel.Entry, com.amd.aparapi.Range)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>execute</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;execute(<a href="../../../com/amd/aparapi/Kernel.Entry.html" title="class in com.amd.aparapi">Kernel.Entry</a>&nbsp;_entry,
             <a href="../../../com/amd/aparapi/Range.html" title="class in com.amd.aparapi">Range</a>&nbsp;_range)</pre>
<div class="block">Start execution of <code>globalSize</code> kernels for the given entrypoint.
 <p>
 When <code>kernel.execute("entrypoint", globalSize)</code> is invoked, Aparapi will schedule the execution of <code>globalSize</code> kernels. If the execution mode is GPU then 
 the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. 
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_entrypoint</code> - is the name of the method we wish to use as the entrypoint to the kernel</dd><dd><code>_globalSize</code> - The number of Kernels that we would like to initiate.</dd>
<dt><span class="strong">Returns:</span></dt><dd>The Kernel instance (this) so we can chain calls to put(arr).execute(range).get(arr)</dd></dl>
</li>
</ul>
<a name="execute(java.lang.String, com.amd.aparapi.Range)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>execute</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;execute(java.lang.String&nbsp;_entrypoint,
             <a href="../../../com/amd/aparapi/Range.html" title="class in com.amd.aparapi">Range</a>&nbsp;_range)</pre>
<div class="block">Start execution of <code>globalSize</code> kernels for the given entrypoint.
 <p>
 When <code>kernel.execute("entrypoint", globalSize)</code> is invoked, Aparapi will schedule the execution of <code>globalSize</code> kernels. If the execution mode is GPU then 
 the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. 
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_entrypoint</code> - is the name of the method we wish to use as the entrypoint to the kernel</dd><dd><code>_globalSize</code> - The number of Kernels that we would like to initiate.</dd>
<dt><span class="strong">Returns:</span></dt><dd>The Kernel instance (this) so we can chain calls to put(arr).execute(range).get(arr)</dd></dl>
</li>
</ul>
<a name="execute(java.lang.String, com.amd.aparapi.Range, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>execute</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;execute(java.lang.String&nbsp;_entrypoint,
             <a href="../../../com/amd/aparapi/Range.html" title="class in com.amd.aparapi">Range</a>&nbsp;_range,
             int&nbsp;_passes)</pre>
<div class="block">Start execution of <code>globalSize</code> kernels for the given entrypoint.
 <p>
 When <code>kernel.execute("entrypoint", globalSize)</code> is invoked, Aparapi will schedule the execution of <code>globalSize</code> kernels. If the execution mode is GPU then 
 the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. 
 <p></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_entrypoint</code> - is the name of the method we wish to use as the entrypoint to the kernel</dd><dd><code>_globalSize</code> - The number of Kernels that we would like to initiate.</dd>
<dt><span class="strong">Returns:</span></dt><dd>The Kernel instance (this) so we can chain calls to put(arr).execute(range).get(arr)</dd></dl>
</li>
</ul>
<a name="dispose()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dispose</h4>
<pre>public&nbsp;void&nbsp;dispose()</pre>
<div class="block">Release any resources associated with this Kernel.
 <p>
 When the execution mode is <code>CPU</code> or <code>GPU</code>, Aparapi stores some OpenCL resources in a data structure associated with the kernel instance.  The 
 <code>dispose()</code> method must be called to release these resources. 
 <p>
 If <code>execute(int _globalSize)</code> is called after <code>dispose()</code> is called the results are undefined.</div>
</li>
</ul>
<a name="getExecutionMode()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getExecutionMode</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.EXECUTION_MODE.html" title="enum in com.amd.aparapi">Kernel.EXECUTION_MODE</a>&nbsp;getExecutionMode()</pre>
<div class="block">Return the current execution mode.  
 
 Before a Kernel executes, this return value will be the execution mode as determined by the setting of 
 the EXECUTION_MODE enumeration. By default, this setting is either <b>GPU</b> 
 if OpenCL is available on the target system, or <b>JTP</b> otherwise. This default setting can be
 changed by calling setExecutionMode(). 
 
 <p>
 After a Kernel executes, the return value will be the mode in which the Kernel actually executed.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>The current execution mode.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="../../../com/amd/aparapi/Kernel.html#setExecutionMode(com.amd.aparapi.Kernel.EXECUTION_MODE)"><code>setExecutionMode(EXECUTION_MODE)</code></a></dd></dl>
</li>
</ul>
<a name="setExecutionMode(com.amd.aparapi.Kernel.EXECUTION_MODE)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setExecutionMode</h4>
<pre>public&nbsp;void&nbsp;setExecutionMode(<a href="../../../com/amd/aparapi/Kernel.EXECUTION_MODE.html" title="enum in com.amd.aparapi">Kernel.EXECUTION_MODE</a>&nbsp;_executionMode)</pre>
<div class="block">Set the execution mode. 
 <p>
 This should be regarded as a request. The real mode will be determined at runtime based on the availability of OpenCL and the characteristics of the workload.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_executionMode</code> - the requested execution mode.</dd><dt><span class="strong">See Also:</span></dt><dd><a href="../../../com/amd/aparapi/Kernel.html#getExecutionMode()"><code>getExecutionMode()</code></a></dd></dl>
</li>
</ul>
<a name="setFallbackExecutionMode()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setFallbackExecutionMode</h4>
<pre>public&nbsp;void&nbsp;setFallbackExecutionMode()</pre>
</li>
</ul>
<a name="getMappedMethodName(com.amd.aparapi.internal.model.ClassModel.ConstantPool.MethodReferenceEntry)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getMappedMethodName</h4>
<pre>public static&nbsp;java.lang.String&nbsp;getMappedMethodName(<a href="../../../com/amd/aparapi/internal/model/ClassModel.ConstantPool.MethodReferenceEntry.html" title="class in com.amd.aparapi.internal.model">ClassModel.ConstantPool.MethodReferenceEntry</a>&nbsp;_methodReferenceEntry)</pre>
</li>
</ul>
<a name="isMappedMethod(com.amd.aparapi.internal.model.ClassModel.ConstantPool.MethodReferenceEntry)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isMappedMethod</h4>
<pre>public static&nbsp;boolean&nbsp;isMappedMethod(<a href="../../../com/amd/aparapi/internal/model/ClassModel.ConstantPool.MethodReferenceEntry.html" title="class in com.amd.aparapi.internal.model">ClassModel.ConstantPool.MethodReferenceEntry</a>&nbsp;methodReferenceEntry)</pre>
</li>
</ul>
<a name="isOpenCLDelegateMethod(com.amd.aparapi.internal.model.ClassModel.ConstantPool.MethodReferenceEntry)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isOpenCLDelegateMethod</h4>
<pre>public static&nbsp;boolean&nbsp;isOpenCLDelegateMethod(<a href="../../../com/amd/aparapi/internal/model/ClassModel.ConstantPool.MethodReferenceEntry.html" title="class in com.amd.aparapi.internal.model">ClassModel.ConstantPool.MethodReferenceEntry</a>&nbsp;methodReferenceEntry)</pre>
</li>
</ul>
<a name="usesAtomic32(com.amd.aparapi.internal.model.ClassModel.ConstantPool.MethodReferenceEntry)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>usesAtomic32</h4>
<pre>public static&nbsp;boolean&nbsp;usesAtomic32(<a href="../../../com/amd/aparapi/internal/model/ClassModel.ConstantPool.MethodReferenceEntry.html" title="class in com.amd.aparapi.internal.model">ClassModel.ConstantPool.MethodReferenceEntry</a>&nbsp;methodReferenceEntry)</pre>
</li>
</ul>
<a name="usesAtomic64(com.amd.aparapi.internal.model.ClassModel.ConstantPool.MethodReferenceEntry)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>usesAtomic64</h4>
<pre>public static&nbsp;boolean&nbsp;usesAtomic64(<a href="../../../com/amd/aparapi/internal/model/ClassModel.ConstantPool.MethodReferenceEntry.html" title="class in com.amd.aparapi.internal.model">ClassModel.ConstantPool.MethodReferenceEntry</a>&nbsp;methodReferenceEntry)</pre>
</li>
</ul>
<a name="setExplicit(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setExplicit</h4>
<pre>public&nbsp;void&nbsp;setExplicit(boolean&nbsp;_explicit)</pre>
<div class="block">For dev purposes (we should remove this for production) allow us to define that this Kernel uses explicit memory management</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_explicit</code> - (true if we want explicit memory management)</dd></dl>
</li>
</ul>
<a name="isExplicit()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isExplicit</h4>
<pre>public&nbsp;boolean&nbsp;isExplicit()</pre>
<div class="block">For dev purposes (we should remove this for production) determine whether this Kernel uses explicit memory management</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>(true if we kernel is using explicit memory management)</dd></dl>
</li>
</ul>
<a name="put(long[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>put</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;put(long[]&nbsp;array)</pre>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="put(double[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>put</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;put(double[]&nbsp;array)</pre>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="put(float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>put</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;put(float[]&nbsp;array)</pre>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="put(int[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>put</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;put(int[]&nbsp;array)</pre>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="put(byte[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>put</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;put(byte[]&nbsp;array)</pre>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="put(char[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>put</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;put(char[]&nbsp;array)</pre>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="put(boolean[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>put</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;put(boolean[]&nbsp;array)</pre>
<div class="block">Tag this array so that it is explicitly enqueued before the kernel is executed</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="get(long[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>get</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;get(long[]&nbsp;array)</pre>
<div class="block">Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="get(double[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>get</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;get(double[]&nbsp;array)</pre>
<div class="block">Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="get(float[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>get</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;get(float[]&nbsp;array)</pre>
<div class="block">Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="get(int[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>get</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;get(int[]&nbsp;array)</pre>
<div class="block">Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="get(byte[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>get</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;get(byte[]&nbsp;array)</pre>
<div class="block">Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="get(char[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>get</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;get(char[]&nbsp;array)</pre>
<div class="block">Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="get(boolean[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>get</h4>
<pre>public&nbsp;<a href="../../../com/amd/aparapi/Kernel.html" title="class in com.amd.aparapi">Kernel</a>&nbsp;get(boolean[]&nbsp;array)</pre>
<div class="block">Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>array</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>This kernel so that we can use the 'fluent' style API</dd></dl>
</li>
</ul>
<a name="getProfileInfo()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getProfileInfo</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/amd/aparapi/ProfileInfo.html" title="class in com.amd.aparapi">ProfileInfo</a>&gt;&nbsp;getProfileInfo()</pre>
<div class="block">Get the profiling information from the last successful call to Kernel.execute().</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>A list of ProfileInfo records</dd></dl>
</li>
</ul>
<a name="addExecutionModes(com.amd.aparapi.Kernel.EXECUTION_MODE...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>addExecutionModes</h4>
<pre>public&nbsp;void&nbsp;addExecutionModes(<a href="../../../com/amd/aparapi/Kernel.EXECUTION_MODE.html" title="enum in com.amd.aparapi">Kernel.EXECUTION_MODE</a>...&nbsp;platforms)</pre>
<div class="block">set possible fallback path for execution modes.
 for example setExecutionFallbackPath(GPU,CPU,JTP) will try to use the GPU
 if it fails it will fall back to OpenCL CPU and finally it will try JTP.</div>
</li>
</ul>
<a name="hasNextExecutionMode()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>hasNextExecutionMode</h4>
<pre>public&nbsp;boolean&nbsp;hasNextExecutionMode()</pre>
<dl><dt><span class="strong">Returns:</span></dt><dd>is there another execution path we can try</dd></dl>
</li>
</ul>
<a name="tryNextExecutionMode()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>tryNextExecutionMode</h4>
<pre>public&nbsp;void&nbsp;tryNextExecutionMode()</pre>
<div class="block">try the next execution path in the list if there aren't any more than give up</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Kernel.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../com/amd/aparapi/Config.InstructionListener.html" title="interface in com.amd.aparapi"><span class="strong">Prev Class</span></a></li>
<li><a href="../../../com/amd/aparapi/Kernel.Constant.html" title="annotation in com.amd.aparapi"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?com/amd/aparapi/Kernel.html" target="_top">Frames</a></li>
<li><a href="Kernel.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested_class_summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
