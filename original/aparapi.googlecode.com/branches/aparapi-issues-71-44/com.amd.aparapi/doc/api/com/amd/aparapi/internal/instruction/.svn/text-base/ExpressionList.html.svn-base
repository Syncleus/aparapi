<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_09) on Wed Nov 28 10:51:57 PST 2012 -->
<title>ExpressionList</title>
<meta name="date" content="2012-11-28">
<link rel="stylesheet" type="text/css" href="../../../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="ExpressionList";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/ExpressionList.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../../../com/amd/aparapi/internal/instruction/BranchSet.SimpleLogicalExpressionNode.html" title="class in com.amd.aparapi.internal.instruction"><span class="strong">Prev Class</span></a></li>
<li><a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../../../index.html?com/amd/aparapi/internal/instruction/ExpressionList.html" target="_top">Frames</a></li>
<li><a href="ExpressionList.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">com.amd.aparapi.internal.instruction</div>
<h2 title="Class ExpressionList" class="title">Class ExpressionList</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>com.amd.aparapi.internal.instruction.ExpressionList</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="strong">ExpressionList</span>
extends java.lang.Object</pre>
<div class="block">Essentially a glorified linked list of Instructions plus some additional state to allow us to transform sequences.
 
 ExpressionLists do have the notion of a parent which allows us to clone an existing parent, allow transformations 
 and then possibly commit or abort the transformations at will.</div>
<dl><dt><span class="strong">Author:</span></dt>
  <dd>gfrost</dd></dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../../../com/amd/aparapi/internal/instruction/ExpressionList.html#ExpressionList(com.amd.aparapi.internal.model.MethodModel)">ExpressionList</a></strong>(<a href="../../../../../com/amd/aparapi/internal/model/MethodModel.html" title="class in com.amd.aparapi.internal.model">MethodModel</a>&nbsp;_methodModel)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a></code></td>
<td class="colLast"><code><strong><a href="../../../../../com/amd/aparapi/internal/instruction/ExpressionList.html#add(com.amd.aparapi.internal.instruction.Instruction)">add</a></strong>(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_instruction)</code>
<div class="block">Add this instruction to the end of the list.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a></code></td>
<td class="colLast"><code><strong><a href="../../../../../com/amd/aparapi/internal/instruction/ExpressionList.html#createList(com.amd.aparapi.internal.instruction.Instruction)">createList</a></strong>(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_newTail)</code>
<div class="block">[1] [2] [3] [4]
  
  Note that passing null here essentially deletes the existing expression list and returns the expression</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../../com/amd/aparapi/internal/instruction/ExpressionList.html#doesNotContainCompositeOrBranch(com.amd.aparapi.internal.instruction.Instruction, com.amd.aparapi.internal.instruction.Instruction)">doesNotContainCompositeOrBranch</a></strong>(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_start,
                               <a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_exclusiveEnd)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../../com/amd/aparapi/internal/instruction/ExpressionList.html#doesNotContainContinueOrBreak(com.amd.aparapi.internal.instruction.Instruction, com.amd.aparapi.internal.instruction.Instruction)">doesNotContainContinueOrBreak</a></strong>(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_start,
                             <a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_extent)</code>
<div class="block">Determine whether the sequence of instructions from _start to _extent is free of branches which extend beyond _extent.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../../com/amd/aparapi/internal/instruction/ExpressionList.html#dumpDiagram(com.amd.aparapi.internal.instruction.Instruction)">dumpDiagram</a></strong>(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_instruction)</code>
<div class="block">Aids debugging.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../../com/amd/aparapi/internal/instruction/ExpressionList.html#foldComposite(com.amd.aparapi.internal.instruction.Instruction)">foldComposite</a></strong>(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_instruction)</code>
<div class="block">Fold headTail.tail into valid composites</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a></code></td>
<td class="colLast"><code><strong><a href="../../../../../com/amd/aparapi/internal/instruction/ExpressionList.html#getHead()">getHead</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a></code></td>
<td class="colLast"><code><strong><a href="../../../../../com/amd/aparapi/internal/instruction/ExpressionList.html#getTail()">getTail</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../../../com/amd/aparapi/internal/instruction/ExpressionList.html#insertBetween(com.amd.aparapi.internal.instruction.Instruction, com.amd.aparapi.internal.instruction.Instruction, com.amd.aparapi.internal.instruction.Instruction)">insertBetween</a></strong>(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_prev,
             <a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_next,
             <a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_newOne)</code>
<div class="block">Insert the given instruction (_newone) between the existing entries (_prev and _next).</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../../../com/amd/aparapi/internal/instruction/ExpressionList.html#replaceInclusive(com.amd.aparapi.internal.instruction.Instruction, com.amd.aparapi.internal.instruction.Instruction, com.amd.aparapi.internal.instruction.Instruction)">replaceInclusive</a></strong>(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_head,
                <a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_tail,
                <a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_newOne)</code>
<div class="block">Inclusive replace between _head and _tail with _newOne.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../../../com/amd/aparapi/internal/instruction/ExpressionList.html#unwind()">unwind</a></strong>()</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="ExpressionList(com.amd.aparapi.internal.model.MethodModel)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>ExpressionList</h4>
<pre>public&nbsp;ExpressionList(<a href="../../../../../com/amd/aparapi/internal/model/MethodModel.html" title="class in com.amd.aparapi.internal.model">MethodModel</a>&nbsp;_methodModel)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="doesNotContainContinueOrBreak(com.amd.aparapi.internal.instruction.Instruction, com.amd.aparapi.internal.instruction.Instruction)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>doesNotContainContinueOrBreak</h4>
<pre>public&nbsp;boolean&nbsp;doesNotContainContinueOrBreak(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_start,
                                    <a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_extent)</pre>
<div class="block">Determine whether the sequence of instructions from _start to _extent is free of branches which extend beyond _extent. 
 
 As a side effect, if we find a possible branch it is likely a break or continue so we mark the conditional as such.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_start</code> - </dd><dd><code>_extent</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="doesNotContainCompositeOrBranch(com.amd.aparapi.internal.instruction.Instruction, com.amd.aparapi.internal.instruction.Instruction)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>doesNotContainCompositeOrBranch</h4>
<pre>public&nbsp;boolean&nbsp;doesNotContainCompositeOrBranch(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_start,
                                      <a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_exclusiveEnd)</pre>
</li>
</ul>
<a name="unwind()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>unwind</h4>
<pre>public&nbsp;void&nbsp;unwind()</pre>
</li>
</ul>
<a name="createList(com.amd.aparapi.internal.instruction.Instruction)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createList</h4>
<pre>public&nbsp;<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;createList(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_newTail)</pre>
<div class="block">[1] [2] [3] [4]
  
  Note that passing null here essentially deletes the existing expression list and returns the expression</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_newTail</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="add(com.amd.aparapi.internal.instruction.Instruction)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>add</h4>
<pre>public&nbsp;<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;add(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_instruction)</pre>
<div class="block">Add this instruction to the end of the list.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_instruction</code> - </dd>
<dt><span class="strong">Returns:</span></dt><dd>The instruction we added</dd></dl>
</li>
</ul>
<a name="insertBetween(com.amd.aparapi.internal.instruction.Instruction, com.amd.aparapi.internal.instruction.Instruction, com.amd.aparapi.internal.instruction.Instruction)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>insertBetween</h4>
<pre>public&nbsp;void&nbsp;insertBetween(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_prev,
                 <a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_next,
                 <a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_newOne)</pre>
<div class="block">Insert the given instruction (_newone) between the existing entries (_prev and _next).</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_prev</code> - </dd><dd><code>_next</code> - </dd><dd><code>_newOne</code> - </dd></dl>
</li>
</ul>
<a name="replaceInclusive(com.amd.aparapi.internal.instruction.Instruction, com.amd.aparapi.internal.instruction.Instruction, com.amd.aparapi.internal.instruction.Instruction)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>replaceInclusive</h4>
<pre>public&nbsp;void&nbsp;replaceInclusive(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_head,
                    <a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_tail,
                    <a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_newOne)</pre>
<div class="block">Inclusive replace between _head and _tail with _newOne. 
 
 <pre>
    |      | --> |       | ---> ... ---> |       | ---> |      |
    | prev |     | _head |               | _tail |      | next |
    |      | <-- |       | <--- ... <----|       | <--- |      |
 </pre>
  To 
 <pre>
    |      | --> |         | ---> |      |
    | prev |     | _newOne |      | next |
    |      | <-- |         | <--- |      |
 </pre></div>
</li>
</ul>
<a name="foldComposite(com.amd.aparapi.internal.instruction.Instruction)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>foldComposite</h4>
<pre>public&nbsp;boolean&nbsp;foldComposite(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_instruction)
                      throws <a href="../../../../../com/amd/aparapi/internal/exception/ClassParseException.html" title="class in com.amd.aparapi.internal.exception">ClassParseException</a></pre>
<div class="block">Fold headTail.tail into valid composites
 
 <pre>
 if(??){then}... 
   ?? ?> [THEN] ...
       -------->

 if (??){THEN}else{ELSE}...
 
   ?? ?> [THEN] >> [ELSE] ...
       ------------>
                 -------->
               
 sun for (INIT,??,DELTA){BODY} ...
 
    [INIT] ?? ?> [BODY] [DELTA] << ...
               ------------------>
            <-------------------
        
 sun for (,??,DELTA){BODY} ...
 
     ?? ?> [BODY] [DELTA] << ...
         ------------------>
      <-------------------    
        
 sun while (?){l} ...
 
    ?? ?> [BODY] << ...
        ----------->
     <------------
               
 eclipse for (INIT,??,DELTA){BODY} ...
    [INIT] >> [BODY] [DELTA] ?? ?< ...
            ---------------->
              <-----------------
          
 eclipse for (,??,DELTA){BODY} ...
    >> [BODY] [DELTA] ?? ?< ...
     --------------->
       <-----------------
      
 eclipse while (??){BODY} ...
    >> [BODY] ?? ?< ...
     -------->
       <----------

 eclipe if (?1) { while (?2) {BODY} } else {ELSE} ...
    ?1 ?> >> [BODY] ?2 ?< >> [ELSE] ...
           --------->
              <---------
        --------------------->    
                           -------->   
 
 sun for (,?1,DELTA){ if (?2) { THEN break; } BODY} ...
 
     ?1 ?> ?2 ?> [THEN] >> [BODY] [DELTA] << ...
               ----------->
         ---------------------------------->
                         ------------------>
     <------------------------------------ 
     
 sun for (,?1,DELTA){ if (?2) { THEN continue; } BODY} ...
 
     ?1 ?> ?2 ?> THEN >> [BODY] [DELTA] << ...
               --------->
                       -------->
         -------------------------------->
     <----------------------------------     
           
 Some exceptions based on sun javac optimizations
 
 if (?1){ if (?2){THEN} }else{ ELSE } ...
   One might expect 
    ?1 ?> ?2 ?> [THEN] >> [ELSE] ...
        ----------------->
              -------->!         
                        ------------->
   However the conditional branch to the unconditional (!) is optimized away and instead the unconditional inverted and extended 
                   
    ?1 ?> ?2 ?> [THEN] >> [ELSE] ...
        ----------------->
              --------*--------->
              
 sun if (?1) { while (?2) {l} } else {e} ...
   One might expect 
    ?1 ?> ?2 ?> [BODY] << >> [ELSE] ...
        ------------------->
              ----------->!
            <----------    
                           -------->
                    
   However as above the conditional branch to the unconditional (!) can be optimized away and the conditional inverted and extended 
    ?1 ?> ?2 ?> [BODY] << >> [ELSE] ...
        -------------------->
              -----------*--------->   
            <-----------  
              
   However we can also now remove the forward unconditional completely as it is unreachable
    ?1 ?> ?2 ?> [BODY] << [ELSE] ...
        ----------------->
              ------------------>   
            <-----------       
               
 sun while(?1){if (?2) {THEN} else {ELSE} } ...
   One might expect 
    ?1 ?> ?2 ?> [BODY] >> [ELSE] << ...
         -------------------------->
           <---------------------
               ---------->    
                         ------->!
                    
   However the unconditional branch to the unconditional backbranch (!) can be optimized away and the unconditional wrapped back directly to the loop control head 
    ?1 ?> ?2 ?> [BODY] << [ELSE] << ...
         -------------------------->
           <---------------------
               ---------->    
           <-----------

 </pre></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_instruction</code> - </dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code><a href="../../../../../com/amd/aparapi/internal/exception/ClassParseException.html" title="class in com.amd.aparapi.internal.exception">ClassParseException</a></code></dd></dl>
</li>
</ul>
<a name="dumpDiagram(com.amd.aparapi.internal.instruction.Instruction)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dumpDiagram</h4>
<pre>public&nbsp;java.lang.String&nbsp;dumpDiagram(<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;_instruction)</pre>
<div class="block">Aids debugging.  Creates a diagrammatic form of the roots (+ tail instruction) so that we can analyze control flow. 
 <pre>
 I I I C C I U I U[I]I
       |---------->1
         |---->1
             |------>2
                 |-->2
 </pre></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>_cursor</code> - The instruction we are looking at</dd><dd><code>_instruction</code> - The instruction we are considering adding (may be null)</dd>
<dt><span class="strong">Returns:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="getTail()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getTail</h4>
<pre>public&nbsp;<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;getTail()</pre>
</li>
</ul>
<a name="getHead()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>getHead</h4>
<pre>public&nbsp;<a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction">Instruction</a>&nbsp;getHead()</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/ExpressionList.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../../../com/amd/aparapi/internal/instruction/BranchSet.SimpleLogicalExpressionNode.html" title="class in com.amd.aparapi.internal.instruction"><span class="strong">Prev Class</span></a></li>
<li><a href="../../../../../com/amd/aparapi/internal/instruction/Instruction.html" title="class in com.amd.aparapi.internal.instruction"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../../../index.html?com/amd/aparapi/internal/instruction/ExpressionList.html" target="_top">Frames</a></li>
<li><a href="ExpressionList.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
